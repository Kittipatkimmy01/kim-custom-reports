# -*- coding: utf-8 -*-

from odoo import fields, models, api, _
from datetime import date, timedelta, datetime


class AccountMove(models.Model):
    _inherit = 'account.move'

    def _compute_amount_suspend_vat(self):
        for invoice in self:
            amount = 0
            for line in invoice.vat_use_line_ids:
                if line.tax_line_id and line.tax_line_id.use_suspend_vat:
                    amount += line.amount_currency
            invoice.amount_suspend_vat = amount
#             invoice.amount_suspend_vat = sum(line.tax_line_id.use_suspend_vat is True and line.amount_residual or 0 for line in invoice.vat_use_line_ids)

    vat_use_line_ids = fields.One2many(
        comodel_name='account.move.line',
        string='Vat Line',
        compute='_compute_vat_use_line',
    )
    amount_suspend_vat = fields.Monetary(
        string = 'Amount Suspend Vat',
        compute = '_compute_amount_suspend_vat',
    )
    express_ref = fields.Char(
        string='Express Ref',
    )
    vat_ref = fields.Char(
        string='Vat Reference',
    )

    def _compute_vat_use_line(self):
        """docstring for _compute_vat_use_line"""
        for rec in self:
            AccMoveLine = self.env['account.move.line']
            AccMove = self.env['account.move']
            move_tax_basis = AccMove.search([('tax_cash_basis_origin_move_id', '=', rec.id),('tax_cash_basis_rec_id', '!=', False)])
            for lmt in move_tax_basis.line_ids:
                if lmt.tax_line_id:
                    AccMoveLine |= lmt
            for line in rec.line_ids:
                if line.tax_line_id:
                    if rec.move_type == 'out_invoice':
                        vat_ref = rec.name
                    else:
                        vat_ref = rec.vat_ref
                    if not line.month_vat and rec.invoice_date:
                        year = str(rec.invoice_date.year)
                        month_vat = str(rec.invoice_date.month)
                    else:
                        year = line.year
                        month_vat = line.month_vat
                    line.write({
                        'date': rec.invoice_date,
                        'vat_ref': vat_ref,
                        'month_vat': month_vat,
                        'year': year,
                    })
                    AccMoveLine |= line
            rec.vat_use_line_ids = AccMoveLine

    def set_partner_line(self):
        """docstring for set_partner_line"""
        for rec in self:
            if rec.journal_id.is_internal_voucher:
                company = self.env.company
                partner = company.partner_id
                for line in rec.line_ids:
                    if not line.partner_id:
                        line.update({
                            'partner_id': partner.id,
                        })

    def _post(self, soft=True):
        """docstring for _post"""
        res = super(AccountMove, self)._post(soft)
        for rec in self:
            for line in rec.vat_use_line_ids:
                if (rec.move_type == 'out_invoice' and line.tax_line_id.auto_usevat_so) or\
                    (rec.move_type == 'in_invoice' and line.tax_line_id.auto_usevat_po):
                    line.is_verify = True
                    line.verify_tax()
        return res

    def action_post(self):
        """docstring for action_post"""
        self.set_partner_line()
        res = super(AccountMove, self).action_post()
        for rec in self:
            for line in rec.vat_use_line_ids:
                if (rec.move_type == 'out_invoice' and line.tax_line_id.auto_usevat_so) or\
                    (rec.move_type == 'in_invoice' and line.tax_line_id.auto_usevat_po):
                    line.is_verify = True
                    line.verify_tax()
        return res

    def button_cancel(self):
        """docstring for button_cancel"""
        res = super(AccountMove, self).button_cancel()
        for rec in self:
            for line in rec.vat_use_line_ids:
                if line.is_verify:
                    line.is_verify = False
        return res

    def button_draft(self):
        """docstring for button_draft"""
        res = super(AccountMove, self).button_draft()
        for rec in self:
            for line in rec.vat_use_line_ids:
                line.unverify_tax()
#                 if line.is_verify:
#                     line.is_verify = False
        return res

    @api.model
    def create(self, vals):
        """docstring for create"""
#         if 'partner_id' in vals and vals.get('partner_id'):
#             partner = self.env['res.partner'].browse(vals['partner_id'])
#             if partner.property_payment_term_id:
#                 vals['invoice_payment_term_id'] = partner.property_payment_term_id.id
#                 if 'invoice_date' in vals and vals.get('invoice_date'):
#                     invoice_date = str(vals['invoice_date'])
#                     days = partner.property_payment_term_id.line_ids[0].days
#                     date = str(datetime.strptime(invoice_date, '%Y-%m-%d') + timedelta(days=days))
#                     vals['invoice_date_due'] = date
        return super(AccountMove, self).create(vals)

    def write(self, vals):
        """docstring for write"""
        if 'partner_id' in vals and vals.get('partner_id'):
            partner = self.env['res.partner'].browse(vals['partner_id'])
        elif len(self) == 1 and self.partner_id:
            partner = self.partner_id
        else:
            partner = False
        if 'invoice_date' in vals and vals.get('invoice_date'):
            invoice_date = str(vals['invoice_date'])
        elif len(self) == 1 and self.invoice_date:
            invoice_date = str(self.invoice_date)
        else:
            invoice_date = False
#         if invoice_date and partner:
#             if partner.property_payment_term_id:
#                 vals['invoice_payment_term_id'] = partner.property_payment_term_id.id
#                 days = partner.property_payment_term_id.line_ids[0].days
#                 date = str(datetime.strptime(invoice_date, '%Y-%m-%d') + timedelta(days=days))
#                 vals['invoice_date_due'] = date
        res = super(AccountMove, self).write(vals)
        return res

#     def update_duedate(self):
#         """docstring for update_duedate"""
#         for rec in self:
#             if rec.partner_id and rec.partner_id.property_payment_term_id and rec.invoice_date:
#                 payment_term = rec.partner_id.property_payment_term_id
#                 rec.invoice_payment_term_id = payment_term.id
#                 days = payment_term.line_ids[0].days
#                 date = rec.invoice_date + timedelta(days=days)
#                 rec.invoice_date_due = date

#     @api.onchange('invoice_payment_term_id')
#     def onchange_payment_term_tat(self):
#         """docstring for onchange_payment_term_tat"""
#         for rec in self:
#             if rec.invoice_payment_term_id and self.invoice_date:
#                 days = rec.invoice_payment_term_id.line_ids[0].days
#                 date = self.invoice_date + timedelta(days=days)
#                 rec.invoice_date_due = date

#     @api.onchange('invoice_date', 'highest_name', 'company_id')
#     def _onchange_invoice_date(self):
#         if self.invoice_date and self.partner_id and self.partner_id.property_payment_term_id:
#             self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id
#             days = self.invoice_payment_term_id.line_ids[0].days
#             date = self.invoice_date + timedelta(days=days)
#             self.invoice_date_due = date
